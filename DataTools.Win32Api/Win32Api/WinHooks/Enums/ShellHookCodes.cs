// ************************************************* ''
// DataTools C# Native Utility Library For Windows - Interop
//
// Module: WinHooks
//         Windows Hook Functions
//
// Some enum documentation copied from the MSDN (and in some cases, updated).
// Some classes and interfaces were ported from the WindowsAPICodePack.
// 
// Copyright (C) 2011-2020 Nathan Moschkin
// All Rights Reserved
//
// Licensed Under the Microsoft Public License   
// ************************************************* ''

using System;
using System.Runtime.InteropServices;

namespace DataTools.Win32Api
{
    public enum ShellHookCodes
    {

        /// <summary>
        /// The accessibility state has changed.
        /// </summary>
        AccessibilityState = 11,

        /// <summary>
        /// The shell should activate its main window.
        /// </summary>
        ActivateShellWindow = 3,

        /// <summary>
        /// The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
        /// If the Shell procedure Handles the WM_COMMAND message, it should Not Call CallNextHookEx. See the Return Value section For more information.
        /// </summary>
        AppCommand = 12,

        /// <summary>
        /// A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
        /// </summary>
        GetMinRect = 5,

        /// <summary>
        /// Keyboard language was changed or a new keyboard layout was loaded.
        /// </summary>
        Language = 8,

        /// <summary>
        /// The title of a window in the task bar has been redrawn.
        /// </summary>
        Redraw = 6,

        /// <summary>
        /// The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
        /// </summary>
        TaskMan = 7,

        /// <summary>
        /// The activation has changed to a different top-level, unowned window.
        /// </summary>
        WindowActivated = 4,

        /// <summary>
        /// A top-level, unowned window has been created. The window exists when the system calls this hook.
        /// </summary>
        WindowCreated = 1,

        /// <summary>
        /// A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
        /// </summary>
        WindowDestroyed = 2,

        /// <summary>
        /// A top-level window is being replaced. The window exists when the system calls this hook.
        /// </summary>
        WindowReplaced = 13
    }
}

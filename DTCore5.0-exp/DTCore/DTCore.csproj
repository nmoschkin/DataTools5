<Project>

  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <TargetFramework>net5.0-windows</TargetFramework>
    <RootNamespace>DataTools</RootNamespace>
    <UseWPF>true</UseWPF>
    <Platforms>AnyCPU;x64;x86</Platforms>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(ProjectDir)**\*.vb</DefaultItemExcludes>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>

  <ItemGroup>
    <Reference Include="Microsoft.VisualBasic" />
    <PackageReference Include="Microsoft.VisualBasic" Version="10.4.0-preview1-27018-01" />
    <PackageReference Include="Microsoft.Win32.Registry" Version="5.0.0-rc.1.20451.14" />
    <PackageReference Include="System.Drawing.Common" Version="5.0.0-rc.1.20451.14" />
  </ItemGroup>


  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <PropertyGroup>
    <CompileDependsOn>
      HideILFromCompile;
      $(CompileDependsOn);
      InitializeIL;
      CoreDecompile;
      CoreCompileIL;
    </CompileDependsOn>
  </PropertyGroup>
  <Target Name="HideILFromCompile">
    <ItemGroup>
      <IL Include="@(None)" Condition="'%(Extension)'=='.il'" />
      <Compile Remove="@(None)" Condition="'%(Extension)'=='.il'" />
    </ItemGroup>
  </Target>
  <Target Name="InitializeIL">
    <PropertyGroup>
      <ILFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).il', ' ')</ILFile>
      <ILResourceFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).res', ' ')</ILResourceFile>
    </PropertyGroup>
  </Target>
  <Target Name="CoreDecompile" Inputs="@(IntermediateAssembly)" Outputs="$(ILFile)" Condition=" Exists ( @(IntermediateAssembly) ) ">
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkSdkPath" />
    </GetFrameworkSdkPath>   
    <PropertyGroup>
      <ILDasm>"$(ProjectDir)\tools\ildasm.exe" /linenum /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <Exec Command="$(ILDasm)" />
    <ItemGroup>
      <FileWrites Include="$(ILFile)" />
      <FileWrites Include="$(ILResourceFile)" />
    </ItemGroup>
    <PropertyGroup>
      <ILSource>$([System.IO.File]::ReadAllText($(ILFile)))</ILSource>
      <Replacement>// method ${method} forwardref removed for IL import</Replacement>
      <Pattern>\.method [^\)]+\) cil managed forwardref[^}]+} // end of method (?&lt;method&gt;[^ \r\t\n]+)</Pattern>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
      <Pattern>\.method [^\)]+\) cil managed[^\a]+"extern was not given a DllImport attribute"[^}]+} // end of method (?&lt;method&gt;[^ \r\t\n]+)</Pattern>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
    </PropertyGroup>
    <WriteLinesToFile File="$(ILFile)" Lines="$(ILSource)" Overwrite="true" />
    <PropertyGroup>
      <ILSource />
    </PropertyGroup>
    <Delete Files="@(IntermediateAssembly)" />
  </Target>
  <Target Name="CoreCompileIL" Inputs="@(IL)" Outputs="@(IntermediateAssembly)">
    <GetFrameworkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkPath" />
    </GetFrameworkPath>
    <PropertyGroup>
      <ILAsm>"$(ProjectDir)\tools\ilasm.exe"  /output:@(IntermediateAssembly->'"%(FullPath)"', ' ')</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(FileAlignment)' != '' ">
      <ILAsm>$(ILAsm) /alignment=$(FileAlignment)</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(BaseAddress)' != '' ">
      <ILAsm>$(ILAsm) /base=$(BaseAddress)</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OutputType)' == 'Library' ">
      <ILAsm>$(ILAsm) /dll</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
      <ILAsm>$(ILAsm) /pdb /pdbfmt=PORTABLE</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
      <ILAsm>$(ILAsm) /debug /pdbfmt=PORTABLE</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Optimize)' == 'true' ">
      <ILAsm>$(ILAsm) /optimize</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Platform)' == 'x64' ">
      <ILAsm>$(ILAsm) /pe64 /x64</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(Platform)' == 'Itanium' ">
      <ILAsm>$(ILAsm) /pe64 /itanium</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(AssemblyOriginatorKeyFile)' != '' ">
      <ILAsm>$(ILAsm) /key:"$(AssemblyOriginatorKeyFile)"</ILAsm>
    </PropertyGroup>
    <PropertyGroup Condition=" Exists ( '$(ILFile)' ) ">
      <ILAsm>$(ILAsm) "$(ILFile)"</ILAsm>
    </PropertyGroup>
    <Exec Command="$(ILAsm) @(IL->'&quot;%(FullPath)&quot;', ' ')" />
    <ItemGroup>
      <FileWrites Include="@(IntermediateAssembly->'%(RootDir)%(Directory)DesignTimeResolveAssemblyReferencesInput.cache', ' ')" />
    </ItemGroup>
    <Touch Files="$(ILFile)" />
 </Target>


</Project>
